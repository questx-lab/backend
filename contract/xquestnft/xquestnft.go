// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package xquestnft

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// XquestnftMetaData contains all meta data concerning the Xquestnft contract.
var XquestnftMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"id\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFromMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseUri\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801562000010575f80fd5b5060405162003983380380620039838339818101604052810190620000369190620002f4565b60405180602001604052805f81525062000056816200009060201b60201c565b50620000776200006b620000a560201b60201c565b620000ac60201b60201c565b80600490816200008891906200057a565b50506200065e565b8060029081620000a191906200057a565b5050565b5f33905090565b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b620001d08262000188565b810181811067ffffffffffffffff82111715620001f257620001f162000198565b5b80604052505050565b5f620002066200016f565b9050620002148282620001c5565b919050565b5f67ffffffffffffffff82111562000236576200023562000198565b5b620002418262000188565b9050602081019050919050565b5f5b838110156200026d57808201518184015260208101905062000250565b5f8484015250505050565b5f6200028e620002888462000219565b620001fb565b905082815260208101848484011115620002ad57620002ac62000184565b5b620002ba8482856200024e565b509392505050565b5f82601f830112620002d957620002d862000180565b5b8151620002eb84826020860162000278565b91505092915050565b5f602082840312156200030c576200030b62000178565b5b5f82015167ffffffffffffffff8111156200032c576200032b6200017c565b5b6200033a84828501620002c2565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200039257607f821691505b602082108103620003a857620003a76200034d565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026200040c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003cf565b620004188683620003cf565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620004626200045c620004568462000430565b62000439565b62000430565b9050919050565b5f819050919050565b6200047d8362000442565b620004956200048c8262000469565b848454620003db565b825550505050565b5f90565b620004ab6200049d565b620004b881848462000472565b505050565b5b81811015620004df57620004d35f82620004a1565b600181019050620004be565b5050565b601f8211156200052e57620004f881620003ae565b6200050384620003c0565b8101602085101562000513578190505b6200052b6200052285620003c0565b830182620004bd565b50505b505050565b5f82821c905092915050565b5f620005505f198460080262000533565b1980831691505092915050565b5f6200056a83836200053f565b9150826002028217905092915050565b620005858262000343565b67ffffffffffffffff811115620005a157620005a062000198565b5b620005ad82546200037a565b620005ba828285620004e3565b5f60209050601f831160018114620005f0575f8415620005db578287015190505b620005e785826200055d565b86555062000656565b601f1984166200060086620003ae565b5f5b82811015620006295784890151825560018201915060208501945060208101905062000602565b8683101562000649578489015162000645601f8916826200053f565b8355505b6001600288020188555050505b505050505050565b613317806200066c5f395ff3fe608060405234801561000f575f80fd5b50600436106100e7575f3560e01c80637e518ec81161008a578063b8bdb08611610064578063b8bdb08614610243578063e985e9c51461025f578063f242432a1461028f578063f2fde38b146102ab576100e7565b80637e518ec8146101ed5780638da5cb5b14610209578063a22cb46514610227576100e7565b80632eb2c2d6116100c65780632eb2c2d61461017b5780634e1273f414610197578063715018a6146101c7578063731133e9146101d1576100e7565b8062fdd58e146100eb57806301ffc9a71461011b5780630e89341c1461014b575b5f80fd5b61010560048036038101906101009190611a70565b6102c7565b6040516101129190611abd565b60405180910390f35b61013560048036038101906101309190611b2b565b61038a565b6040516101429190611b70565b60405180910390f35b61016560048036038101906101609190611b89565b61046b565b6040516101729190611c3e565b60405180910390f35b61019560048036038101906101909190611e4e565b61049f565b005b6101b160048036038101906101ac9190611fd9565b610540565b6040516101be9190612106565b60405180910390f35b6101cf610657565b005b6101eb60048036038101906101e69190612126565b61066a565b005b61020760048036038101906102029190612244565b610684565b005b61021161069f565b60405161021e919061229a565b60405180910390f35b610241600480360381019061023c91906122dd565b6106c7565b005b61025d6004803603810190610258919061231b565b6106dd565b005b61027960048036038101906102749190612402565b61075e565b6040516102869190611b70565b60405180910390f35b6102a960048036038101906102a49190612440565b6107ec565b005b6102c560048036038101906102c091906124d3565b61088d565b005b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032d9061256e565b60405180910390fd5b5f808381526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f7fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061045457507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061046457506104638261090f565b5b9050919050565b6060600461047883610978565b6040516020016104899291906126ff565b6040516020818303038152906040529050919050565b6104a7610a42565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806104ed57506104ec856104e7610a42565b61075e565b5b61052c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105239061279d565b60405180910390fd5b6105398585858585610a49565b5050505050565b60608151835114610586576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057d9061282b565b60405180910390fd5b5f835167ffffffffffffffff8111156105a2576105a1611c62565b5b6040519080825280602002602001820160405280156105d05781602001602082028036833780820191505090505b5090505f5b845181101561064c5761061c8582815181106105f4576105f3612849565b5b602002602001015185838151811061060f5761060e612849565b5b60200260200101516102c7565b82828151811061062f5761062e612849565b5b60200260200101818152505080610645906128a3565b90506105d5565b508091505092915050565b61065f610d57565b6106685f610dd5565b565b610672610d57565b61067e84848484610e98565b50505050565b61068c610d57565b806004908161069b9190612a75565b5050565b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6106d96106d2610a42565b838361103b565b5050565b5f5b845181101561075657610743868683815181106106ff576106fe612849565b5b602002602001015186848151811061071a57610719612849565b5b602002602001015186858151811061073557610734612849565b5b6020026020010151866107ec565b808061074e906128a3565b9150506106df565b505050505050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b6107f4610a42565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061083a575061083985610834610a42565b61075e565b5b610879576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108709061279d565b60405180910390fd5b61088685858585856111a2565b5050505050565b610895610d57565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fa90612bb4565b60405180910390fd5b61090c81610dd5565b50565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60605f60016109868461142b565b0190505f8167ffffffffffffffff8111156109a4576109a3611c62565b5b6040519080825280601f01601f1916602001820160405280156109d65781602001600182028036833780820191505090505b5090505f82602001820190505b600115610a37578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610a2c57610a2b612bd2565b5b0494505f85036109e3575b819350505050919050565b5f33905090565b8151835114610a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8490612c6f565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610afb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af290612cfd565b60405180910390fd5b5f610b04610a42565b9050610b1481878787878761157c565b5f5b8451811015610cb4575f858281518110610b3357610b32612849565b5b602002602001015190505f858381518110610b5157610b50612849565b5b602002602001015190505f805f8481526020019081526020015f205f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610bed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be490612d8b565b60405180910390fd5b8181035f808581526020019081526020015f205f8c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f808581526020019081526020015f205f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610c999190612da9565b9250508190555050505080610cad906128a3565b9050610b16565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610d2b929190612ddc565b60405180910390a4610d41818787878787611584565b610d4f81878787878761158c565b505050505050565b610d5f610a42565b73ffffffffffffffffffffffffffffffffffffffff16610d7d61069f565b73ffffffffffffffffffffffffffffffffffffffff1614610dd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dca90612e5b565b60405180910390fd5b565b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610f06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efd90612ee9565b60405180910390fd5b5f610f0f610a42565b90505f610f1b85611762565b90505f610f2785611762565b9050610f37835f8985858961157c565b845f808881526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610f919190612da9565b925050819055508673ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161100e929190612f07565b60405180910390a4611024835f89858589611584565b611032835f898989896117da565b50505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a090612f9e565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516111959190611b70565b60405180910390a3505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120790612cfd565b60405180910390fd5b5f611219610a42565b90505f61122585611762565b90505f61123185611762565b905061124183898985858961157c565b5f805f8881526020019081526020015f205f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050858110156112d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ca90612d8b565b60405180910390fd5b8581035f808981526020019081526020015f205f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550855f808981526020019081526020015f205f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461137f9190612da9565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a6040516113fc929190612f07565b60405180910390a4611412848a8a86868a611584565b611420848a8a8a8a8a6117da565b505050505050505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611487577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161147d5761147c612bd2565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106114c4576d04ee2d6d415b85acef810000000083816114ba576114b9612bd2565b5b0492506020810190505b662386f26fc1000083106114f357662386f26fc1000083816114e9576114e8612bd2565b5b0492506010810190505b6305f5e100831061151c576305f5e100838161151257611511612bd2565b5b0492506008810190505b612710831061154157612710838161153757611536612bd2565b5b0492506004810190505b60648310611564576064838161155a57611559612bd2565b5b0492506002810190505b600a8310611573576001810190505b80915050919050565b505050505050565b505050505050565b6115ab8473ffffffffffffffffffffffffffffffffffffffff166119b0565b1561175a578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016115f195949392919061300e565b6020604051808303815f875af192505050801561162c57506040513d601f19601f820116820180604052508101906116299190613088565b60015b6116d1576116386130bf565b806308c379a003611694575061164c6130de565b806116575750611696565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168b9190611c3e565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c8906131dd565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174f9061326b565b60405180910390fd5b505b505050505050565b60605f600167ffffffffffffffff8111156117805761177f611c62565b5b6040519080825280602002602001820160405280156117ae5781602001602082028036833780820191505090505b50905082815f815181106117c5576117c4612849565b5b60200260200101818152505080915050919050565b6117f98473ffffffffffffffffffffffffffffffffffffffff166119b0565b156119a8578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b815260040161183f959493929190613289565b6020604051808303815f875af192505050801561187a57506040513d601f19601f820116820180604052508101906118779190613088565b60015b61191f576118866130bf565b806308c379a0036118e2575061189a6130de565b806118a557506118e4565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d99190611c3e565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611916906131dd565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146119a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199d9061326b565b60405180910390fd5b505b505050505050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611a0c826119e3565b9050919050565b611a1c81611a02565b8114611a26575f80fd5b50565b5f81359050611a3781611a13565b92915050565b5f819050919050565b611a4f81611a3d565b8114611a59575f80fd5b50565b5f81359050611a6a81611a46565b92915050565b5f8060408385031215611a8657611a856119db565b5b5f611a9385828601611a29565b9250506020611aa485828601611a5c565b9150509250929050565b611ab781611a3d565b82525050565b5f602082019050611ad05f830184611aae565b92915050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611b0a81611ad6565b8114611b14575f80fd5b50565b5f81359050611b2581611b01565b92915050565b5f60208284031215611b4057611b3f6119db565b5b5f611b4d84828501611b17565b91505092915050565b5f8115159050919050565b611b6a81611b56565b82525050565b5f602082019050611b835f830184611b61565b92915050565b5f60208284031215611b9e57611b9d6119db565b5b5f611bab84828501611a5c565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015611beb578082015181840152602081019050611bd0565b5f8484015250505050565b5f601f19601f8301169050919050565b5f611c1082611bb4565b611c1a8185611bbe565b9350611c2a818560208601611bce565b611c3381611bf6565b840191505092915050565b5f6020820190508181035f830152611c568184611c06565b905092915050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611c9882611bf6565b810181811067ffffffffffffffff82111715611cb757611cb6611c62565b5b80604052505050565b5f611cc96119d2565b9050611cd58282611c8f565b919050565b5f67ffffffffffffffff821115611cf457611cf3611c62565b5b602082029050602081019050919050565b5f80fd5b5f611d1b611d1684611cda565b611cc0565b90508083825260208201905060208402830185811115611d3e57611d3d611d05565b5b835b81811015611d675780611d538882611a5c565b845260208401935050602081019050611d40565b5050509392505050565b5f82601f830112611d8557611d84611c5e565b5b8135611d95848260208601611d09565b91505092915050565b5f80fd5b5f67ffffffffffffffff821115611dbc57611dbb611c62565b5b611dc582611bf6565b9050602081019050919050565b828183375f83830152505050565b5f611df2611ded84611da2565b611cc0565b905082815260208101848484011115611e0e57611e0d611d9e565b5b611e19848285611dd2565b509392505050565b5f82601f830112611e3557611e34611c5e565b5b8135611e45848260208601611de0565b91505092915050565b5f805f805f60a08688031215611e6757611e666119db565b5b5f611e7488828901611a29565b9550506020611e8588828901611a29565b945050604086013567ffffffffffffffff811115611ea657611ea56119df565b5b611eb288828901611d71565b935050606086013567ffffffffffffffff811115611ed357611ed26119df565b5b611edf88828901611d71565b925050608086013567ffffffffffffffff811115611f0057611eff6119df565b5b611f0c88828901611e21565b9150509295509295909350565b5f67ffffffffffffffff821115611f3357611f32611c62565b5b602082029050602081019050919050565b5f611f56611f5184611f19565b611cc0565b90508083825260208201905060208402830185811115611f7957611f78611d05565b5b835b81811015611fa25780611f8e8882611a29565b845260208401935050602081019050611f7b565b5050509392505050565b5f82601f830112611fc057611fbf611c5e565b5b8135611fd0848260208601611f44565b91505092915050565b5f8060408385031215611fef57611fee6119db565b5b5f83013567ffffffffffffffff81111561200c5761200b6119df565b5b61201885828601611fac565b925050602083013567ffffffffffffffff811115612039576120386119df565b5b61204585828601611d71565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61208181611a3d565b82525050565b5f6120928383612078565b60208301905092915050565b5f602082019050919050565b5f6120b48261204f565b6120be8185612059565b93506120c983612069565b805f5b838110156120f95781516120e08882612087565b97506120eb8361209e565b9250506001810190506120cc565b5085935050505092915050565b5f6020820190508181035f83015261211e81846120aa565b905092915050565b5f805f806080858703121561213e5761213d6119db565b5b5f61214b87828801611a29565b945050602061215c87828801611a5c565b935050604061216d87828801611a5c565b925050606085013567ffffffffffffffff81111561218e5761218d6119df565b5b61219a87828801611e21565b91505092959194509250565b5f67ffffffffffffffff8211156121c0576121bf611c62565b5b6121c982611bf6565b9050602081019050919050565b5f6121e86121e3846121a6565b611cc0565b90508281526020810184848401111561220457612203611d9e565b5b61220f848285611dd2565b509392505050565b5f82601f83011261222b5761222a611c5e565b5b813561223b8482602086016121d6565b91505092915050565b5f60208284031215612259576122586119db565b5b5f82013567ffffffffffffffff811115612276576122756119df565b5b61228284828501612217565b91505092915050565b61229481611a02565b82525050565b5f6020820190506122ad5f83018461228b565b92915050565b6122bc81611b56565b81146122c6575f80fd5b50565b5f813590506122d7816122b3565b92915050565b5f80604083850312156122f3576122f26119db565b5b5f61230085828601611a29565b9250506020612311858286016122c9565b9150509250929050565b5f805f805f60a08688031215612334576123336119db565b5b5f61234188828901611a29565b955050602086013567ffffffffffffffff811115612362576123616119df565b5b61236e88828901611fac565b945050604086013567ffffffffffffffff81111561238f5761238e6119df565b5b61239b88828901611d71565b935050606086013567ffffffffffffffff8111156123bc576123bb6119df565b5b6123c888828901611d71565b925050608086013567ffffffffffffffff8111156123e9576123e86119df565b5b6123f588828901611e21565b9150509295509295909350565b5f8060408385031215612418576124176119db565b5b5f61242585828601611a29565b925050602061243685828601611a29565b9150509250929050565b5f805f805f60a08688031215612459576124586119db565b5b5f61246688828901611a29565b955050602061247788828901611a29565b945050604061248888828901611a5c565b935050606061249988828901611a5c565b925050608086013567ffffffffffffffff8111156124ba576124b96119df565b5b6124c688828901611e21565b9150509295509295909350565b5f602082840312156124e8576124e76119db565b5b5f6124f584828501611a29565b91505092915050565b7f455243313135353a2061646472657373207a65726f206973206e6f74206120765f8201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b5f612558602a83611bbe565b9150612563826124fe565b604082019050919050565b5f6020820190508181035f8301526125858161254c565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806125d057607f821691505b6020821081036125e3576125e261258c565b5b50919050565b5f81905092915050565b5f819050815f5260205f209050919050565b5f8154612611816125b9565b61261b81866125e9565b9450600182165f8114612635576001811461264a5761267c565b60ff198316865281151582028601935061267c565b612653856125f3565b5f5b8381101561267457815481890152600182019150602081019050612655565b838801955050505b50505092915050565b5f61268f82611bb4565b61269981856125e9565b93506126a9818560208601611bce565b80840191505092915050565b7f2e6a736f6e0000000000000000000000000000000000000000000000000000005f82015250565b5f6126e96005836125e9565b91506126f4826126b5565b600582019050919050565b5f61270a8285612605565b91506127168284612685565b9150612721826126dd565b91508190509392505050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e5f8201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b5f612787602e83611bbe565b91506127928261272d565b604082019050919050565b5f6020820190508181035f8301526127b48161277b565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e6774685f8201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b5f612815602983611bbe565b9150612820826127bb565b604082019050919050565b5f6020820190508181035f83015261284281612809565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6128ad82611a3d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128df576128de612876565b5b600182019050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026129347fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826128f9565b61293e86836128f9565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61297961297461296f84611a3d565b612956565b611a3d565b9050919050565b5f819050919050565b6129928361295f565b6129a661299e82612980565b848454612905565b825550505050565b5f90565b6129ba6129ae565b6129c5818484612989565b505050565b5b818110156129e8576129dd5f826129b2565b6001810190506129cb565b5050565b601f821115612a2d576129fe816125f3565b612a07846128ea565b81016020851015612a16578190505b612a2a612a22856128ea565b8301826129ca565b50505b505050565b5f82821c905092915050565b5f612a4d5f1984600802612a32565b1980831691505092915050565b5f612a658383612a3e565b9150826002028217905092915050565b612a7e82611bb4565b67ffffffffffffffff811115612a9757612a96611c62565b5b612aa182546125b9565b612aac8282856129ec565b5f60209050601f831160018114612add575f8415612acb578287015190505b612ad58582612a5a565b865550612b3c565b601f198416612aeb866125f3565b5f5b82811015612b1257848901518255600182019150602085019450602081019050612aed565b86831015612b2f5784890151612b2b601f891682612a3e565b8355505b6001600288020188555050505b505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f612b9e602683611bbe565b9150612ba982612b44565b604082019050919050565b5f6020820190508181035f830152612bcb81612b92565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b7f455243313135353a2069647320616e6420616d6f756e7473206c656e677468205f8201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b5f612c59602883611bbe565b9150612c6482612bff565b604082019050919050565b5f6020820190508181035f830152612c8681612c4d565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f612ce7602583611bbe565b9150612cf282612c8d565b604082019050919050565b5f6020820190508181035f830152612d1481612cdb565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f5f8201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b5f612d75602a83611bbe565b9150612d8082612d1b565b604082019050919050565b5f6020820190508181035f830152612da281612d69565b9050919050565b5f612db382611a3d565b9150612dbe83611a3d565b9250828201905080821115612dd657612dd5612876565b5b92915050565b5f6040820190508181035f830152612df481856120aa565b90508181036020830152612e0881846120aa565b90509392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f612e45602083611bbe565b9150612e5082612e11565b602082019050919050565b5f6020820190508181035f830152612e7281612e39565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f206164647265735f8201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b5f612ed3602183611bbe565b9150612ede82612e79565b604082019050919050565b5f6020820190508181035f830152612f0081612ec7565b9050919050565b5f604082019050612f1a5f830185611aae565b612f276020830184611aae565b9392505050565b7f455243313135353a2073657474696e6720617070726f76616c207374617475735f8201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b5f612f88602983611bbe565b9150612f9382612f2e565b604082019050919050565b5f6020820190508181035f830152612fb581612f7c565b9050919050565b5f81519050919050565b5f82825260208201905092915050565b5f612fe082612fbc565b612fea8185612fc6565b9350612ffa818560208601611bce565b61300381611bf6565b840191505092915050565b5f60a0820190506130215f83018861228b565b61302e602083018761228b565b818103604083015261304081866120aa565b9050818103606083015261305481856120aa565b905081810360808301526130688184612fd6565b90509695505050505050565b5f8151905061308281611b01565b92915050565b5f6020828403121561309d5761309c6119db565b5b5f6130aa84828501613074565b91505092915050565b5f8160e01c9050919050565b5f60033d11156130db5760045f803e6130d85f516130b3565b90505b90565b5f60443d1061316a576130ef6119d2565b60043d036004823e80513d602482011167ffffffffffffffff8211171561311757505061316a565b808201805167ffffffffffffffff811115613135575050505061316a565b80602083010160043d03850181111561315257505050505061316a565b61316182602001850186611c8f565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d455243313135355f8201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b5f6131c7603483611bbe565b91506131d28261316d565b604082019050919050565b5f6020820190508181035f8301526131f4816131bb565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a656374655f8201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b5f613255602883611bbe565b9150613260826131fb565b604082019050919050565b5f6020820190508181035f83015261328281613249565b9050919050565b5f60a08201905061329c5f83018861228b565b6132a9602083018761228b565b6132b66040830186611aae565b6132c36060830185611aae565b81810360808301526132d58184612fd6565b9050969550505050505056fea2646970667358221220d2ac1cf80883a0b5c1d782153c5d848336a9d195af1c8660b92266dd637b724264736f6c63430008150033",
}

// XquestnftABI is the input ABI used to generate the binding from.
// Deprecated: Use XquestnftMetaData.ABI instead.
var XquestnftABI = XquestnftMetaData.ABI

// XquestnftBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use XquestnftMetaData.Bin instead.
var XquestnftBin = XquestnftMetaData.Bin

// DeployXquestnft deploys a new Ethereum contract, binding an instance of Xquestnft to it.
func DeployXquestnft(auth *bind.TransactOpts, backend bind.ContractBackend, baseUri string) (common.Address, *types.Transaction, *Xquestnft, error) {
	parsed, err := XquestnftMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(XquestnftBin), backend, baseUri)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Xquestnft{XquestnftCaller: XquestnftCaller{contract: contract}, XquestnftTransactor: XquestnftTransactor{contract: contract}, XquestnftFilterer: XquestnftFilterer{contract: contract}}, nil
}

// Xquestnft is an auto generated Go binding around an Ethereum contract.
type Xquestnft struct {
	XquestnftCaller     // Read-only binding to the contract
	XquestnftTransactor // Write-only binding to the contract
	XquestnftFilterer   // Log filterer for contract events
}

// XquestnftCaller is an auto generated read-only Go binding around an Ethereum contract.
type XquestnftCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// XquestnftTransactor is an auto generated write-only Go binding around an Ethereum contract.
type XquestnftTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// XquestnftFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type XquestnftFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// XquestnftSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type XquestnftSession struct {
	Contract     *Xquestnft        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// XquestnftCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type XquestnftCallerSession struct {
	Contract *XquestnftCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// XquestnftTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type XquestnftTransactorSession struct {
	Contract     *XquestnftTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// XquestnftRaw is an auto generated low-level Go binding around an Ethereum contract.
type XquestnftRaw struct {
	Contract *Xquestnft // Generic contract binding to access the raw methods on
}

// XquestnftCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type XquestnftCallerRaw struct {
	Contract *XquestnftCaller // Generic read-only contract binding to access the raw methods on
}

// XquestnftTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type XquestnftTransactorRaw struct {
	Contract *XquestnftTransactor // Generic write-only contract binding to access the raw methods on
}

// NewXquestnft creates a new instance of Xquestnft, bound to a specific deployed contract.
func NewXquestnft(address common.Address, backend bind.ContractBackend) (*Xquestnft, error) {
	contract, err := bindXquestnft(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Xquestnft{XquestnftCaller: XquestnftCaller{contract: contract}, XquestnftTransactor: XquestnftTransactor{contract: contract}, XquestnftFilterer: XquestnftFilterer{contract: contract}}, nil
}

// NewXquestnftCaller creates a new read-only instance of Xquestnft, bound to a specific deployed contract.
func NewXquestnftCaller(address common.Address, caller bind.ContractCaller) (*XquestnftCaller, error) {
	contract, err := bindXquestnft(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &XquestnftCaller{contract: contract}, nil
}

// NewXquestnftTransactor creates a new write-only instance of Xquestnft, bound to a specific deployed contract.
func NewXquestnftTransactor(address common.Address, transactor bind.ContractTransactor) (*XquestnftTransactor, error) {
	contract, err := bindXquestnft(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &XquestnftTransactor{contract: contract}, nil
}

// NewXquestnftFilterer creates a new log filterer instance of Xquestnft, bound to a specific deployed contract.
func NewXquestnftFilterer(address common.Address, filterer bind.ContractFilterer) (*XquestnftFilterer, error) {
	contract, err := bindXquestnft(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &XquestnftFilterer{contract: contract}, nil
}

// bindXquestnft binds a generic wrapper to an already deployed contract.
func bindXquestnft(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := XquestnftMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Xquestnft *XquestnftRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Xquestnft.Contract.XquestnftCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Xquestnft *XquestnftRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Xquestnft.Contract.XquestnftTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Xquestnft *XquestnftRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Xquestnft.Contract.XquestnftTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Xquestnft *XquestnftCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Xquestnft.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Xquestnft *XquestnftTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Xquestnft.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Xquestnft *XquestnftTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Xquestnft.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Xquestnft *XquestnftCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Xquestnft.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Xquestnft *XquestnftSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Xquestnft.Contract.BalanceOf(&_Xquestnft.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Xquestnft *XquestnftCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Xquestnft.Contract.BalanceOf(&_Xquestnft.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Xquestnft *XquestnftCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Xquestnft.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Xquestnft *XquestnftSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Xquestnft.Contract.BalanceOfBatch(&_Xquestnft.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Xquestnft *XquestnftCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Xquestnft.Contract.BalanceOfBatch(&_Xquestnft.CallOpts, accounts, ids)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Xquestnft *XquestnftCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Xquestnft.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Xquestnft *XquestnftSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Xquestnft.Contract.IsApprovedForAll(&_Xquestnft.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Xquestnft *XquestnftCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Xquestnft.Contract.IsApprovedForAll(&_Xquestnft.CallOpts, account, operator)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Xquestnft *XquestnftCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Xquestnft.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Xquestnft *XquestnftSession) Owner() (common.Address, error) {
	return _Xquestnft.Contract.Owner(&_Xquestnft.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Xquestnft *XquestnftCallerSession) Owner() (common.Address, error) {
	return _Xquestnft.Contract.Owner(&_Xquestnft.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Xquestnft *XquestnftCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Xquestnft.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Xquestnft *XquestnftSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Xquestnft.Contract.SupportsInterface(&_Xquestnft.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Xquestnft *XquestnftCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Xquestnft.Contract.SupportsInterface(&_Xquestnft.CallOpts, interfaceId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenid) view returns(string)
func (_Xquestnft *XquestnftCaller) Uri(opts *bind.CallOpts, tokenid *big.Int) (string, error) {
	var out []interface{}
	err := _Xquestnft.contract.Call(opts, &out, "uri", tokenid)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenid) view returns(string)
func (_Xquestnft *XquestnftSession) Uri(tokenid *big.Int) (string, error) {
	return _Xquestnft.Contract.Uri(&_Xquestnft.CallOpts, tokenid)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenid) view returns(string)
func (_Xquestnft *XquestnftCallerSession) Uri(tokenid *big.Int) (string, error) {
	return _Xquestnft.Contract.Uri(&_Xquestnft.CallOpts, tokenid)
}

// Mint is a paid mutator transaction binding the contract method 0x731133e9.
//
// Solidity: function mint(address to, uint256 id, uint256 amount, bytes data) returns()
func (_Xquestnft *XquestnftTransactor) Mint(opts *bind.TransactOpts, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Xquestnft.contract.Transact(opts, "mint", to, id, amount, data)
}

// Mint is a paid mutator transaction binding the contract method 0x731133e9.
//
// Solidity: function mint(address to, uint256 id, uint256 amount, bytes data) returns()
func (_Xquestnft *XquestnftSession) Mint(to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Xquestnft.Contract.Mint(&_Xquestnft.TransactOpts, to, id, amount, data)
}

// Mint is a paid mutator transaction binding the contract method 0x731133e9.
//
// Solidity: function mint(address to, uint256 id, uint256 amount, bytes data) returns()
func (_Xquestnft *XquestnftTransactorSession) Mint(to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Xquestnft.Contract.Mint(&_Xquestnft.TransactOpts, to, id, amount, data)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Xquestnft *XquestnftTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Xquestnft.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Xquestnft *XquestnftSession) RenounceOwnership() (*types.Transaction, error) {
	return _Xquestnft.Contract.RenounceOwnership(&_Xquestnft.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Xquestnft *XquestnftTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Xquestnft.Contract.RenounceOwnership(&_Xquestnft.TransactOpts)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Xquestnft *XquestnftTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Xquestnft.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Xquestnft *XquestnftSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Xquestnft.Contract.SafeBatchTransferFrom(&_Xquestnft.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Xquestnft *XquestnftTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Xquestnft.Contract.SafeBatchTransferFrom(&_Xquestnft.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Xquestnft *XquestnftTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Xquestnft.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Xquestnft *XquestnftSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Xquestnft.Contract.SafeTransferFrom(&_Xquestnft.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Xquestnft *XquestnftTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Xquestnft.Contract.SafeTransferFrom(&_Xquestnft.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFromMultiple is a paid mutator transaction binding the contract method 0xb8bdb086.
//
// Solidity: function safeTransferFromMultiple(address from, address[] to, uint256[] id, uint256[] amount, bytes data) returns()
func (_Xquestnft *XquestnftTransactor) SafeTransferFromMultiple(opts *bind.TransactOpts, from common.Address, to []common.Address, id []*big.Int, amount []*big.Int, data []byte) (*types.Transaction, error) {
	return _Xquestnft.contract.Transact(opts, "safeTransferFromMultiple", from, to, id, amount, data)
}

// SafeTransferFromMultiple is a paid mutator transaction binding the contract method 0xb8bdb086.
//
// Solidity: function safeTransferFromMultiple(address from, address[] to, uint256[] id, uint256[] amount, bytes data) returns()
func (_Xquestnft *XquestnftSession) SafeTransferFromMultiple(from common.Address, to []common.Address, id []*big.Int, amount []*big.Int, data []byte) (*types.Transaction, error) {
	return _Xquestnft.Contract.SafeTransferFromMultiple(&_Xquestnft.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFromMultiple is a paid mutator transaction binding the contract method 0xb8bdb086.
//
// Solidity: function safeTransferFromMultiple(address from, address[] to, uint256[] id, uint256[] amount, bytes data) returns()
func (_Xquestnft *XquestnftTransactorSession) SafeTransferFromMultiple(from common.Address, to []common.Address, id []*big.Int, amount []*big.Int, data []byte) (*types.Transaction, error) {
	return _Xquestnft.Contract.SafeTransferFromMultiple(&_Xquestnft.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Xquestnft *XquestnftTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Xquestnft.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Xquestnft *XquestnftSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Xquestnft.Contract.SetApprovalForAll(&_Xquestnft.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Xquestnft *XquestnftTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Xquestnft.Contract.SetApprovalForAll(&_Xquestnft.TransactOpts, operator, approved)
}

// SetBaseMetadataURI is a paid mutator transaction binding the contract method 0x7e518ec8.
//
// Solidity: function setBaseMetadataURI(string newBaseUri) returns()
func (_Xquestnft *XquestnftTransactor) SetBaseMetadataURI(opts *bind.TransactOpts, newBaseUri string) (*types.Transaction, error) {
	return _Xquestnft.contract.Transact(opts, "setBaseMetadataURI", newBaseUri)
}

// SetBaseMetadataURI is a paid mutator transaction binding the contract method 0x7e518ec8.
//
// Solidity: function setBaseMetadataURI(string newBaseUri) returns()
func (_Xquestnft *XquestnftSession) SetBaseMetadataURI(newBaseUri string) (*types.Transaction, error) {
	return _Xquestnft.Contract.SetBaseMetadataURI(&_Xquestnft.TransactOpts, newBaseUri)
}

// SetBaseMetadataURI is a paid mutator transaction binding the contract method 0x7e518ec8.
//
// Solidity: function setBaseMetadataURI(string newBaseUri) returns()
func (_Xquestnft *XquestnftTransactorSession) SetBaseMetadataURI(newBaseUri string) (*types.Transaction, error) {
	return _Xquestnft.Contract.SetBaseMetadataURI(&_Xquestnft.TransactOpts, newBaseUri)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Xquestnft *XquestnftTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Xquestnft.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Xquestnft *XquestnftSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Xquestnft.Contract.TransferOwnership(&_Xquestnft.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Xquestnft *XquestnftTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Xquestnft.Contract.TransferOwnership(&_Xquestnft.TransactOpts, newOwner)
}

// XquestnftApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Xquestnft contract.
type XquestnftApprovalForAllIterator struct {
	Event *XquestnftApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *XquestnftApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(XquestnftApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(XquestnftApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *XquestnftApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *XquestnftApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// XquestnftApprovalForAll represents a ApprovalForAll event raised by the Xquestnft contract.
type XquestnftApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Xquestnft *XquestnftFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*XquestnftApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Xquestnft.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &XquestnftApprovalForAllIterator{contract: _Xquestnft.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Xquestnft *XquestnftFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *XquestnftApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Xquestnft.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(XquestnftApprovalForAll)
				if err := _Xquestnft.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Xquestnft *XquestnftFilterer) ParseApprovalForAll(log types.Log) (*XquestnftApprovalForAll, error) {
	event := new(XquestnftApprovalForAll)
	if err := _Xquestnft.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// XquestnftOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Xquestnft contract.
type XquestnftOwnershipTransferredIterator struct {
	Event *XquestnftOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *XquestnftOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(XquestnftOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(XquestnftOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *XquestnftOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *XquestnftOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// XquestnftOwnershipTransferred represents a OwnershipTransferred event raised by the Xquestnft contract.
type XquestnftOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Xquestnft *XquestnftFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*XquestnftOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Xquestnft.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &XquestnftOwnershipTransferredIterator{contract: _Xquestnft.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Xquestnft *XquestnftFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *XquestnftOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Xquestnft.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(XquestnftOwnershipTransferred)
				if err := _Xquestnft.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Xquestnft *XquestnftFilterer) ParseOwnershipTransferred(log types.Log) (*XquestnftOwnershipTransferred, error) {
	event := new(XquestnftOwnershipTransferred)
	if err := _Xquestnft.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// XquestnftTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the Xquestnft contract.
type XquestnftTransferBatchIterator struct {
	Event *XquestnftTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *XquestnftTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(XquestnftTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(XquestnftTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *XquestnftTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *XquestnftTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// XquestnftTransferBatch represents a TransferBatch event raised by the Xquestnft contract.
type XquestnftTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Xquestnft *XquestnftFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*XquestnftTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Xquestnft.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &XquestnftTransferBatchIterator{contract: _Xquestnft.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Xquestnft *XquestnftFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *XquestnftTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Xquestnft.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(XquestnftTransferBatch)
				if err := _Xquestnft.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Xquestnft *XquestnftFilterer) ParseTransferBatch(log types.Log) (*XquestnftTransferBatch, error) {
	event := new(XquestnftTransferBatch)
	if err := _Xquestnft.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// XquestnftTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the Xquestnft contract.
type XquestnftTransferSingleIterator struct {
	Event *XquestnftTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *XquestnftTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(XquestnftTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(XquestnftTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *XquestnftTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *XquestnftTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// XquestnftTransferSingle represents a TransferSingle event raised by the Xquestnft contract.
type XquestnftTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Xquestnft *XquestnftFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*XquestnftTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Xquestnft.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &XquestnftTransferSingleIterator{contract: _Xquestnft.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Xquestnft *XquestnftFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *XquestnftTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Xquestnft.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(XquestnftTransferSingle)
				if err := _Xquestnft.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Xquestnft *XquestnftFilterer) ParseTransferSingle(log types.Log) (*XquestnftTransferSingle, error) {
	event := new(XquestnftTransferSingle)
	if err := _Xquestnft.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// XquestnftURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the Xquestnft contract.
type XquestnftURIIterator struct {
	Event *XquestnftURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *XquestnftURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(XquestnftURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(XquestnftURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *XquestnftURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *XquestnftURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// XquestnftURI represents a URI event raised by the Xquestnft contract.
type XquestnftURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Xquestnft *XquestnftFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*XquestnftURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Xquestnft.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &XquestnftURIIterator{contract: _Xquestnft.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Xquestnft *XquestnftFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *XquestnftURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Xquestnft.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(XquestnftURI)
				if err := _Xquestnft.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Xquestnft *XquestnftFilterer) ParseURI(log types.Log) (*XquestnftURI, error) {
	event := new(XquestnftURI)
	if err := _Xquestnft.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
