// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/questx-lab/backend/pkg/storage"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// BulkUpload provides a mock function with given fields: _a0, _a1
func (_m *Storage) BulkUpload(_a0 context.Context, _a1 []*storage.UploadObject) ([]*storage.UploadResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*storage.UploadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*storage.UploadObject) ([]*storage.UploadResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*storage.UploadObject) []*storage.UploadResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.UploadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*storage.UploadObject) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: _a0, _a1
func (_m *Storage) Upload(_a0 context.Context, _a1 *storage.UploadObject) (*storage.UploadResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *storage.UploadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storage.UploadObject) (*storage.UploadResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storage.UploadObject) *storage.UploadResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.UploadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storage.UploadObject) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
