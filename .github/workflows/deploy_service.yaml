name: Build and Deploy services to GKE

on:
  workflow_dispatch:
    inputs:
      service:
        type: choice
        description: "Service which you want deploy"
        required: true
        options:
          - api
          - cron
          - search
          - notification-proxy
          - notification-engine
          - blockchain
      environment:
        type: choice
        description: "Environment which you want deploy"
        required: true
        options:
          - develop
          - staging
          - production
env:
  PROJECT_ID: ${{ vars.PROJECT_ID }}
  GAR_LOCATION: ${{ vars.GAR_LOCATION }}
  SERVICE: ${{ vars.SERVICE_NAME }}
  APP_NAME: ${{ vars.APP_NAME }}
  GKE_CLUSTER_NAME: ${{ vars.GKE_CLUSTER_NAME }}
  CLUSTER_REGION: ${{ vars.CLUSTER_REGION }}
  K8S_SECRETS: ${{ secrets.K8S_SECRETS }}
  K8S_CONFIGMAPS: "${{ vars.K8S_CONFIGMAPS }}"
  GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
  DOMAIN: ${{ vars.DOMAIN }}
  SEARCH_DOMAIN: ${{ vars.SEARCH_DOMAIN }}
  NOTIFICATION_PROXY_DOMAIN: ${{ vars.NOTIFICATION_PROXY_DOMAIN }}

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: "read"
      id-token: "write"
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          credentials_json: "${{ env.GCP_CREDENTIALS }}"

      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v1"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.APP_NAME }}/${{ env.SERVICE }}:${{ github.sha }}" . -f deploy/Dockerfile
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.APP_NAME }}/${{ env.SERVICE }}:${{ github.sha }}"

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER_NAME }}
          location: ${{ env.CLUSTER_REGION }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Install helm
        run: |-
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Create namespaces
        run: |-
          kubectl get namespace | grep -q "^backend " || kubectl create namespace backend
          kubectl get namespace | grep -q "^tidb " || kubectl create namespace tidb

      - name: Clean deployments
        run: |-
          echo "${{ github.event.inputs.service }}"

          kubectl delete deployment -n backend ${{ github.event.inputs.service }} --ignore-not-found

          kubectl delete secret -n backend ${{ github.event.inputs.service }} --ignore-not-found

          kubectl delete configmap -n backend ${{ github.event.inputs.service }} --ignore-not-found

      - name: Create secret and configmap
        run: |-
          SECRETS="${{ env.K8S_SECRETS }}"
          secrets_cmd=""
          for line in $SECRETS;
          do
            secrets_cmd="${secrets_cmd} --from-literal=${line}"
          done

          kubectl create secret generic ${{ github.event.inputs.service }} -n backend $secrets_cmd


          CONFIGMAPS="${{ env.K8S_CONFIGMAPS }}"
          configs_cmd=""
          for line in $CONFIGMAPS;
          do
            configs_cmd="${configs_cmd} --from-literal=${line}"
          done

          kubectl create configmap ${{ github.event.inputs.service }} -n backend $configs_cmd

      - name: Deploy
        run: |-

          IMG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.APP_NAME }}/${{ env.SERVICE }}
          TAG=${{ github.sha }}

          SERVICE=${{ github.event.inputs.service }}

          case $SERVICE in

          api)
            helm upgrade --install api ./deploy/api \
              --namespace backend \
              --set=image.tag="${{ github.sha }}" \
              --set=image.repository="$IMG" \
              --set=ingress.hosts[0].host=${{ env.DOMAIN }} \
              --set=ingress.hosts[0].paths[0].path="/" \
              --set=ingress.hosts[0].paths[0].pathType=Prefix
            ;;

          notification-proxy)
             helm upgrade --install notification-proxy ./deploy/notification-proxy \
              --namespace backend \
              --set=image.tag="${{ github.sha }}" \
              --set=image.repository="$IMG" \
              --set=ingress.hosts[0].host=${{ env.NOTIFICATION_PROXY_DOMAIN }} \
              --set=ingress.hosts[0].paths[0].path="/" \
              --set=ingress.hosts[0].paths[0].pathType=Prefix
            ;;

          *)
            helm upgrade --install $SERVICE ./deploy/$SERVICE \
            --namespace backend \
            --set=image.tag="${{ github.sha }}" \
            --set=image.repository="$IMG"
            ;;
          esac
