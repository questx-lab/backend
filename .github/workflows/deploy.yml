name: Build and Deploy to GKE

on:
  pull_request:
    branches: ["staging", "production"]
    # types: ["closed"]

env:
  PROJECT_ID: ${{ vars.PROJECT_ID }}
  GAR_LOCATION: ${{ vars.GAR_LOCATION }}
  SERVICE: ${{ vars.SERVICE_NAME }}
  APP_NAME: ${{ vars.APP_NAME }}
  GKE_CLUSTER_NAME: ${{ vars.GKE_CLUSTER_NAME }}
  CLUSTER_REGION: ${{ vars.CLUSTER_REGION }}
  K8S_SECRETS: ${{ secrets.K8S_SECRETS }}
  K8S_CONFIGMAPS: "${{ vars.K8S_CONFIGMAPS }}"
  GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
  DOMAIN: ${{ vars.DOMAIN }}
  SEARCH_DOMAIN: ${{ vars.SEARCH_DOMAIN }}
  GAME_PROXY_DOMAIN: ${{ vars.GAME_PROXY_DOMAIN }}

jobs:
  deploy:
    # if: ${{ github.event.pull_request.merged }} #! only merged to master
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: "read"
      id-token: "write"
    environment: ${{ github.base_ref }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          credentials_json: "${{ env.GCP_CREDENTIALS }}"

      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v1"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.APP_NAME }}/${{ env.SERVICE }}:${{ github.sha }}" . -f deploy/Dockerfile
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.APP_NAME }}/${{ env.SERVICE }}:${{ github.sha }}"

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER_NAME }}
          location: ${{ env.CLUSTER_REGION }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Install helm
        run: |-
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Create namespaces
        run: |-
          kubectl get namespace | grep -q "^backend " || kubectl create namespace backend
          kubectl get namespace | grep -q "^tidb " || kubectl create namespace tidb

      # TODO: Update tidb-cluster.yaml. It's used only for demo and not production ready.
      - name: Install insfrastructure
        run: |-
          helm repo add bitnami https://charts.bitnami.com/bitnami --no-update
          helm repo add pingcap https://charts.pingcap.org/  --no-update

          helm upgrade --install redis bitnami/redis --namespace infrastructure --create-namespace --set=auth.enabled=false
          helm upgrade --install kafka bitnami/kafka --set numPartitions=3 --namespace infrastructure --create-namespace
          helm upgrade --install --namespace tidb-admin tidb-operator pingcap/tidb-operator --version v1.5.0-beta.1 --create-namespace

          kubectl apply -f ./deploy/tidb-cluster.yaml -n tidb
          kubectl apply -f https://raw.githubusercontent.com/pingcap/tidb-operator/master/examples/basic/tidb-monitor.yaml -n tidb

          kubectl patch tc basic -n tidb --type merge -p '{"spec":{"version":"v7.1.0"}}'

          kubectl delete deployment -n infrastructure kafka-ui-deployment --ignore-not-found
          kubectl apply -f ./deploy/kafka-ui.yaml -n infrastructure

      - name: Clean deployments
        run: |-
          kubectl delete deployment -n backend api --ignore-not-found
          kubectl delete deployment -n backend cron --ignore-not-found
          kubectl delete deployment -n backend search --ignore-not-found
          kubectl delete deployment -n backend gameengine --ignore-not-found
          kubectl delete deployment -n backend gameproxy --ignore-not-found
          kubectl delete deployment -n backend gamecenter --ignore-not-found


          kubectl delete secret -n backend api --ignore-not-found
          kubectl delete secret -n backend cron --ignore-not-found
          kubectl delete secret -n backend search --ignore-not-found
          kubectl delete secret -n backend gameengine --ignore-not-found
          kubectl delete secret -n backend gameproxy --ignore-not-found
          kubectl delete secret -n backend gamecenter --ignore-not-found

          kubectl delete configmap -n backend api --ignore-not-found
          kubectl delete configmap -n backend cron --ignore-not-found
          kubectl delete configmap -n backend search --ignore-not-found
          kubectl delete configmap -n backend gameengine --ignore-not-found
          kubectl delete configmap -n backend gameproxy --ignore-not-found
          kubectl delete configmap -n backend gamecenter --ignore-not-found

      - name: Create secret and configmap
        run: |-
          SECRETS="${{ env.K8S_SECRETS }}"
          secrets_cmd=""
          for line in $SECRETS;
          do
            secrets_cmd="${secrets_cmd} --from-literal=${line}"
          done

          kubectl create secret generic api -n backend $secrets_cmd
          kubectl create secret generic cron -n backend $secrets_cmd
          kubectl create secret generic search -n backend $secrets_cmd
          kubectl create secret generic gameengine -n backend $secrets_cmd
          kubectl create secret generic gameproxy -n backend $secrets_cmd
          kubectl create secret generic gamecenter -n backend $secrets_cmd

          CONFIGMAPS="${{ env.K8S_CONFIGMAPS }}"
          configs_cmd=""
          for line in $CONFIGMAPS;
          do
            configs_cmd="${configs_cmd} --from-literal=${line}"
          done

          kubectl create configmap api -n backend $configs_cmd
          kubectl create configmap cron -n backend $configs_cmd
          kubectl create configmap search -n backend $configs_cmd
          kubectl create configmap gameengine -n backend $configs_cmd
          kubectl create configmap gameproxy -n backend $configs_cmd
          kubectl create configmap gamecenter -n backend $configs_cmd

      - name: Deploy
        run: |-

          IMG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.APP_NAME }}/${{ env.SERVICE }}
          TAG=${{ github.sha }}

          helm upgrade --install api ./deploy/api \
          --namespace backend \
          --set=image.tag="${{ github.sha }}" \
          --set=image.repository="$IMG" \
          --set=ingress.hosts[0].host=${{ env.DOMAIN }} \
          --set=ingress.hosts[0].paths[0].path="/" \
          --set=ingress.hosts[0].paths[0].pathType=Prefix

          helm upgrade --install cron ./deploy/cron \
          --namespace backend \
          --set=image.tag="${{ github.sha }}" \
          --set=image.repository="$IMG"

          helm upgrade --install search ./deploy/search \
          --namespace backend \
          --set=image.tag="${{ github.sha }}" \
          --set=image.repository="$IMG"

           helm upgrade --install gameengine ./deploy/gameengine \
          --namespace backend \
          --set=image.tag="${{ github.sha }}" \
          --set=image.repository="$IMG" 

           helm upgrade --install gameproxy ./deploy/gameproxy \
          --namespace backend \
          --set=image.tag="${{ github.sha }}" \
          --set=image.repository="$IMG" \
          --set=ingress.hosts[0].host=${{ env.GAME_PROXY_DOMAIN }} \
          --set=ingress.hosts[0].paths[0].path="/" \
          --set=ingress.hosts[0].paths[0].pathType=Prefix

           helm upgrade --install gamecenter ./deploy/gamecenter \
          --namespace backend \
          --set=image.tag="${{ github.sha }}" \
          --set=image.repository="$IMG"

          echo "aaa"
